*****SERVER SETUP INSTRUCTIONS*****
This guide assuming you are using Google Cloud Platform to set up your servers. You will create 7 total servers:
1 ansiible management server running centOS to automate deployment of ansible playbooks and bash scripts
3 web servers running Debian that allow http and https traffic
3 webserver + database server hybrids that run Debian and allow http and https traffic.
These servers should be located in different regions so as to avoid any potential downtime problems. Try and geolocate them close to the user for optimal performance.

***GENERAL OVERVIEW OF SETUP***
These instructions will walk you through how to initially set up your servers required packages, passwords, sshd_config files, ansible host and config files, ansible playbooks, and required bash scripts. It will also have you set up cron jobs to automatically keep the required packages updated at set time intervals. Once everything is set up you will be able to run the Ansible Management System playbooks to enact changes on all your remote hosts so that you can install relevant packages or clone existing git repositories to them for deployment.


***SERVER PACKAGE AND SCRIPT INSTALLATION SETUP***
1) Change the root password for all of the vms by using sudo passwd (enter password) to something you will store in cleartext later on in the ansible host file.
2) Then on all the Debian servers change the /etc/ssh/sshd_config using sudo nano and change PermitRootLogin to yes and change PasswordAuthentication to yes. You can save your changes using ctrl + x then entering y.
(Optionally change password authentication on the AMS server as well if you plan on remotely controlling it outside of gcp login options).
3) Install ansible on the Ansible Management Server (AMS) using sudo yum install ansible and accept all dependencies and packages.
4) Navigate to the ansible config file on the AMS using sudo nano /etc/ansible/ansible.cfg
(Note: You will need to install nano on the AMS, as it does not come pre-installed with centOS servers, use sudo yum install nano).
5) In the ansible.cfg file uncomment the host_key_checking = False command around line 71.
6) Now navigate to the AMS ansible host file using sudo nano /etc/ansible/hosts and set up all the groups for the webservers and hybrid servers using their internal IPs (which wont change between sessions) and adding in the ansible_user and ansible_password in grouped variables. (IMPORTANT: Spelling must be EXACTLY the same, or it will not work)
Note* Logging in as root gives us elevated permissions for installing/running everything on the remote servers and is needed for how our playbooks and bash scripts will be set up.

Example:
# Grouped Webservers Dev Env
 [webserversdev]
 10.128.0.30

 [webserversdev:vars]
 ansible_user=root
 ansible_password=Mickey2023!

# Grouped Database Servers Dev Env
 [hybridsdev]
 10.128.0.31

 [hybridsdev:vars]
 ansible_user=root
 ansible_password=Mickey2023!

# Grouped Webservers Test  Env
 [webserverstest]
 10.128.0.26

 [webserverstest:vars]
 ansible_user=root
 ansible_password=Mickey2023!

# Grouped Database Servers Test Env
 [hybridstest]
 10.128.0.27

 [hybridstest:vars]
 ansible_user=root
 ansible_password=Mickey2023!

7) Set up your ssh authentication key on the AMS with no password being used (for automation purposes) and in the default directory.
8) Once the above steps are completed restart all of the servers to finalize changes.
9) Log back into the AMS and create and move into a ansible_playbooks directory where you will store your playbooks and bash scripts.
10) Copy the provided playbooks and scripts into your ansible_playbooks directory.
11) Run the deploy-playbooks.sh shell script and select the environment you want to run the ansible playbook for (Dev, Test, Prod, Packages). For your initial run you will select packages to Install Apache2, NodeJS, Git, and MariaDB to their respective host servers that you setup in the hosts file.

*****CRON JOB SETUP*****
This section will allow you to setup cron jobs to automatically run selected playbooks or scripts in order to keep the selected packages on the server up to date at all times. A cron job follows the general format of six fields:
m h dom month dow command
minute hour day_of_month day_of_week command_to_run target_of_command_if_applicable

for example 45 13 * * 3 curl https://google.com will send a curl request to google at 1:45 p.m. every Wednesday Every wednesday of every month.

Every user on a server has their own crontab they have to make
1) Because the AMS is running centOS, it does not have crontabs by default, so install crontabs using sudo yum install crontabs

2) Next you must manually start the cron daemon manually using sudo systemctl start crond.service. 

3) Run sudo systemctl enable crond.service to ensure the cron daemon runs whenever the server starts up.

4) Now you can edit the crontab, unfortunately it used vi as default experience, and that is terrible. So update your system to use nano as its default text editor with nano ~/.bash_profile, scroll to the bottom and enter export VISUAL="nano" at the bottom and save the changes. Then reload the bash profiles using . ~/.bash_profile to implement the changes.

5) Now open either your individuals crontab using crontab -e or the system-wide crontabs using sudo nano /etc/crontab (on centOS the default crontab isn't populated with any commands telling you how to use it, the server-wide crontab, however, does). 
6) Set the cron job to run your packages.yml ansible playbook every minute of every day by using the deploy-playbooks bash script taking the input of 4 for packages:
* * * * * /absolute/path/to/directory && /absolute/path/to/file arguments
Assuming you set the file up in ansible_playbooks like I did the correct cron setup using the server-wide crontab would be:
* * * * * cd /home/username/ansible_playbooks && /home/username/ansible_playbooks/deploy-playbooks.sh 4
 
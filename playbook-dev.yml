---
    # Install Apache2 and NodeJS on web servers for Dev Environment
  - name: Apache2 and NodeJS
    # host targets
    hosts: webservers databaseservers
    # tasks to run on the host targets to install Apache2 and NodeJS
    tasks: 
        # Install Apache2
      - name: Install Apache2
        apt:
          name: apache2
          # ensure that Apache2 is installed and the latest version
          state: latest
        # install NodeJS
      - name: Install NodeJS
        apt:
          name: nodejs
          # ensure that NodeJS is installed and the latest version
          state: latest
          
    # Install MariaDB on database servers for Dev Environment      
  - name: MariaDB
    hosts: databaseservers
    tasks:
      - name: Install MariaDB
        apt:
          name: mariadb-server
          state: latest
          
    # Set up SSH keys on web and database servers for Dev Environment by copying the public key to the authorized_keys file and copying the private key to the .ssh directory
  - name: Set up SSH keys
    hosts: webservers databaseservers
    become: yes
    vars:
      # the user to add the SSH key to
      ssh_user: tdrobertso42
      # the public key to add to the authorized_keys file
      ssh_public_key: "{{ lookup('file', '/home/tdrobertso42/.ssh/id_rsa.pub') }}"
      # the private key to copy to the .ssh directory
      ssh_private_key: "/home/tdrobertso42/.ssh/id_rsa"
    # tasks to run on the host targets to set up SSH keys
    tasks:
      - name: Add SSH key to authorized keys
        # add the public key to the authorized_keys file
        ansible.builtin.authorized_key:
          user: "{{ ssh_user }}"
          state: present
          key: "{{ ssh_public_key }}"

      # copy the private key to the .ssh directory
      - name: Copy Private SSH key
        copy: 
          # the private key to copy to the .ssh directory
          src: "{{ ssh_private_key }}"
          # the destination of the private key
          dest: "/home/{{ ssh_user }}/.ssh/id_rsa"
          owner: "{{ ssh_user }}"
          group: "{{ ssh_user }}"
          # set permissions of the private key
          mode: '0600'
        # only run this task
        when: ssh_private_key is defined

    # Upload the SSH Setup Script to the web and database servers for Dev Environment
  - name: Upload SSH Setup Script
    hosts: webservers databaseservers
    tasks:
    - name: Copy SSH Setup Script
      copy:
        # the source of the SSH Setup Script
        src: /home/tdrobertso42/ansible_playbooks/addSSH.sh
        # the destination of the SSH Setup Script
        dest: /tmp/addSSH.sh
        # set permissions of the SSH Setup Script
        mode: '0755'
      # run this task as root
      become: yes

    # Run the SSH Setup Script on the web and database servers for Dev Environment
  - name: Execute SSH Setup Script
    hosts: webservers databaseservers
    # run this task as root
    become: yes
    tasks:
      - name:
        # run the SSH Setup Script as root
        command: /tmp/addSSH.sh
        become: yes
          
          
    # Deploy the Web Application to the web servers for Dev Environment
  - name: Deploy Web Application
    hosts: webservers databaseservers
    vars:
      # The URL of the Git repository to clone from
      repo_url: "git@github.com:ttu-bburchfield/swollenhippofinal.git"
      # The specific branch to clone from
      branch_name: "{{ branch }}" # Change for each environment.
      # Set the destination to the web root for the environment
      destination: "/var/www/html"
    # Install Git, clone the repository, and pull the latest changes
    tasks:
      - name: Install Git 
        apt:
          name: git
          state: latest
      # Check if the git repo already exists and clone it if it doesn't
      - name: Check if the git repo already exists
        stat:
          path: "{{ destination }}/.git"
        register: git_repo
      # Clone the repository if it doesn't exist
      - name: Clone Repository
        git:
          repo: "{{ repo_url }}"
          dest: "{{ destination }}"
          version: "{{ branch_name }}"
          clone: yes
          update: yes
        when: not git_repo.stat.exists
      # Pull the latest changes if the repository exists
      - name: Pull latest changes in Repository
        git:
          repo: "{{ repo_url }}"
          dest: "{{ destination }}"
          version: "{{ branch_name }}"
          update: yes
        when: git_repo.stat.exists